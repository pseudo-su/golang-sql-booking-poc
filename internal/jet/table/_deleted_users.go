//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DeletedUsers = newDeletedUsersTable("public", "_deleted_users", "")

type deletedUsersTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnString
	Email     postgres.ColumnString
	FirstName postgres.ColumnString
	LastName  postgres.ColumnString
	Mobile    postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	DeletedAt postgres.ColumnTimestampz
	DeletedID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DeletedUsersTable struct {
	deletedUsersTable

	EXCLUDED deletedUsersTable
}

// AS creates new DeletedUsersTable with assigned alias
func (a DeletedUsersTable) AS(alias string) *DeletedUsersTable {
	return newDeletedUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DeletedUsersTable with assigned schema name
func (a DeletedUsersTable) FromSchema(schemaName string) *DeletedUsersTable {
	return newDeletedUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DeletedUsersTable with assigned table prefix
func (a DeletedUsersTable) WithPrefix(prefix string) *DeletedUsersTable {
	return newDeletedUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DeletedUsersTable with assigned table suffix
func (a DeletedUsersTable) WithSuffix(suffix string) *DeletedUsersTable {
	return newDeletedUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDeletedUsersTable(schemaName, tableName, alias string) *DeletedUsersTable {
	return &DeletedUsersTable{
		deletedUsersTable: newDeletedUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newDeletedUsersTableImpl("", "excluded", ""),
	}
}

func newDeletedUsersTableImpl(schemaName, tableName, alias string) deletedUsersTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		EmailColumn     = postgres.StringColumn("email")
		FirstNameColumn = postgres.StringColumn("first_name")
		LastNameColumn  = postgres.StringColumn("last_name")
		MobileColumn    = postgres.StringColumn("mobile")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn = postgres.TimestampzColumn("deleted_at")
		DeletedIDColumn = postgres.StringColumn("_deleted_id")
		allColumns      = postgres.ColumnList{IDColumn, EmailColumn, FirstNameColumn, LastNameColumn, MobileColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, DeletedIDColumn}
		mutableColumns  = postgres.ColumnList{IDColumn, EmailColumn, FirstNameColumn, LastNameColumn, MobileColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return deletedUsersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Email:     EmailColumn,
		FirstName: FirstNameColumn,
		LastName:  LastNameColumn,
		Mobile:    MobileColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,
		DeletedID: DeletedIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
